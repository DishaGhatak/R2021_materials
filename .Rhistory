source("~/Library/Mobile Documents/com~apple~CloudDocs/Programming/R/LMU-Munich-Summer-School-2021/LMU-Munich-Summer-School-2021/DG-Code-1.R")
---------------- HEADER ---------------------------------
#
# Author: Disha Ghatak
# GitHub: https://github.com/DishaGhatak
# Date: sys.date()
# -------------------------------- HEADER ---------------------------------
#
# Author: Disha Ghatak
# GitHub: https://github.com/DishaGhatak
date: "`r Sys.Date()`"
f <- function(x) {
(2 * x + 3) / sqrt(3)
}
f(3)
list_a <- list(
5:7,
"I'm a string",
c(TRUE, TRUE),
c(1.23, 4.20)
)
list_a
df_langs <- data.frame ( background = factor (c (  "Python",
"Stata", "Stata", "Stata",
"R"
) ),
skill = rnorm(5) # draw 5 random numbers from a normal dist.
)
View(df_langs)
head(df_langs)
df_langs[2, 2]
df_langs$background[1]
df_langs[df_langs$skill < 0, ]
dim(df_langs)
lm(skill ~ background)
lm(skill ~ background)
lm(df_langs$skill ~ background)
lm(df_langs$skill ~ df_langs$background)
df_langs_m <- as.matrix(df_langs) # convert data.frame to matrix
print(df_langs_m)
typeof(df_langs_m[2, 1])
install.packages("tidyverse")
library(tidyverse)
install.packages("pacman")
pacman::p_load(
tidyverse,
patchwork,
rio,
data.table
)
source("~/Library/Mobile Documents/com~apple~CloudDocs/Programming/R/LMU-Munich-Summer-School-2021/LMU-Munich-Summer-School-2021/DG-Code-1.R")
lotr <- data.frame(
race = c("hobbits", "hobbits", "elves", "hobbits", "dwarves", "men"),
character = c("Frodo", "Sam", "Arwen", "Golum", "Gimli", "Eowyn"),
gender = c("male", "male", "female", "male", "male", "female"),
`age_0-100` = c(1,1,0,0,0,1),
`age_100-500` = c(0,0,0,0,1,0),
`age_500-100` = c(0,0,0,1,0,0),
`age_>1000` = c(0, 0, 1, 0, 0, 0),
check.names = FALSE
)
lotr
lotr <- lotr %>%
pivot_longer(4:7, names_to = "age_cat", values_to = "classifier") %>%
filter(classifier == 1) %>%
select(-classifier) %>%
mutate(age_cat = str_remove(age_cat, "age_"))
pacman::p_load(
tidyverse,
data.table,
rio,
patchwork,
DT,
modelsummary,
collapse,
forcats
)
lotr <- data.frame(
race = c("hobbits", "hobbits", "elves", "hobbits", "dwarves", "men"),
character = c("Frodo", "Sam", "Arwen", "Golum", "Gimli", "Eowyn"),
gender = c("male", "male", "female", "male", "male", "female"),
`age_0-100` = c(1,1,0,0,0,1),
`age_100-500` = c(0,0,0,0,1,0),
`age_500-100` = c(0,0,0,1,0,0),
`age_>1000` = c(0, 0, 1, 0, 0, 0),
check.names = FALSE
)
lotr
lotr <- lotr %>%
pivot_longer(4:7, names_to = "age_cat", values_to = "classifier")
lotr
print(n = 24)
lotr <- lotr %>%
pivot_longer(4:7, names_to = "age_cat", values_to = "classifier")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
lotr
lotr <- data.frame(
race = c("hobbits", "hobbits", "elves", "hobbits", "dwarves", "men"),
character = c("Frodo", "Sam", "Arwen", "Golum", "Gimli", "Eowyn"),
gender = c("male", "male", "female", "male", "male", "female"),
`age_0-100` = c(1,1,0,0,0,1),
`age_100-500` = c(0,0,0,0,1,0),
`age_500-100` = c(0,0,0,1,0,0),
`age_>1000` = c(0, 0, 1, 0, 0, 0),
check.names = FALSE
)
lotr # What we see is messy data
lotr <- lotr %>%
pivot_longer(4:7, names_to = "age_cat", values_to = "classifier") %>%
filter(classifier == 1) %>%
as.data.frame(lotr)
lotr
lotr <- lotr %>%
pivot_longer(4:7, names_to = "age_cat", values_to = "classifier") %>%
filter(classifier == 1) %>%
select(-classifier) %>%
lotr
lotr <- lotr %>%
pivot_longer(4:7, names_to = "age_cat", values_to = "classifier") %>%
filter(classifier == 1) %>%
select(-classifier) %>%
lotr
lotr()
lotr
lotr <- lotr %>%
pivot_longer(4:7, names_to = "age_cat", values_to = "classifier") %>%
filter(classifier == 1) %>%
select(-classifier) %>%
mutate(age_cat = str_remove(age_cat, "age_"))
lotr <- lotr %>%
pivot_longer(4:7, names_to = "age_cat", values_to = "classifier") %>%
filter(classifier == 1) %>%
select(-classifier) %>%
mutate(age_cat = str_remove(age_cat, "age_"))
rlang::last_trace()
lotr <- data.frame(
race = c("hobbits", "hobbits", "elves", "hobbits", "dwarves", "men"),
character = c("Frodo", "Sam", "Arwen", "Golum", "Gimli", "Eowyn"),
gender = c("male", "male", "female", "male", "male", "female"),
`age_0-100` = c(1,1,0,0,0,1),
`age_100-500` = c(0,0,0,0,1,0),
`age_500-100` = c(0,0,0,1,0,0),
`age_>1000` = c(0, 0, 1, 0, 0, 0),
check.names = FALSE
)
lotr # What we see is messy data
lotr <- lotr %>%
pivot_longer(4:7, names_to = "age_cat", values_to = "classifier") %>%
filter(classifier == 1) %>%
select(-classifier) %>%
mutate(age_cat = str_remove(age_cat, "age_"))
lotr
lotr <- lotr %>%
pivot_longer(4:7, names_to = "age_cat", values_to = "classifier") %>%
#             pivot_longer () - this functions lengthens data, increases the number of rows,
#             and decreases the number of columns, the inverse of this is pivot wider ()
#             syntax is like -
#                                 pivot_longer (
#                                            data,
#                                            cols,
#                                            values_to = "value",
#                                            )
#             See more at: https://tidyr.tidyverse.org/reference/pivot_longer.html
filter(classifier == 1) %>%
#           When applied to a data frame, row names are silently dropped.
select(classifier) %>%
mutate(age_cat = str_remove(age_cat, "age_"))
lotr <- data.frame(
race = c("hobbits", "hobbits", "elves", "hobbits", "dwarves", "men"),
character = c("Frodo", "Sam", "Arwen", "Golum", "Gimli", "Eowyn"),
gender = c("male", "male", "female", "male", "male", "female"),
`age_0-100` = c(1,1,0,0,0,1),
`age_100-500` = c(0,0,0,0,1,0),
`age_500-100` = c(0,0,0,1,0,0),
`age_>1000` = c(0, 0, 1, 0, 0, 0),
check.names = FALSE
)
lotr # What we see is messy data
# Now we want to make it tidy
lotr <- lotr %>%
pivot_longer(4:7, names_to = "age_cat", values_to = "classifier") %>%
#             pivot_longer () - this functions lengthens data, increases the number of rows,
#             and decreases the number of columns, the inverse of this is pivot wider ()
#             syntax is like -
#                                 pivot_longer (
#                                            data,
#                                            cols,
#                                            values_to = "value",
#                                            )
#             See more at: https://tidyr.tidyverse.org/reference/pivot_longer.html
filter(classifier == 1) %>%
#           When applied to a data frame, row names are silently dropped.
select(classifier) %>%
mutate(age_cat = str_remove(age_cat, "age_"))
rlang::last_trace()
lotr <- data.frame(
race = c("hobbits", "hobbits", "elves", "hobbits", "dwarves", "men"),
character = c("Frodo", "Sam", "Arwen", "Golum", "Gimli", "Eowyn"),
gender = c("male", "male", "female", "male", "male", "female"),
`age_0-100` = c(1,1,0,0,0,1),
`age_100-500` = c(0,0,0,0,1,0),
`age_500-100` = c(0,0,0,1,0,0),
`age_>1000` = c(0, 0, 1, 0, 0, 0),
check.names = FALSE
)
lotr # What we see is messy data
# Now we want to make it tidy
lotr <- lotr %>%
pivot_longer(4:7, names_to = "age_cat", values_to = "classifier") %>%
#             pivot_longer () - this functions lengthens data, increases the number of rows,
#             and decreases the number of columns, the inverse of this is pivot wider ()
#             syntax is like -
#                                 pivot_longer (
#                                            data,
#                                            cols,
#                                            values_to = "value",
#                                            )
#             See more at: https://tidyr.tidyverse.org/reference/pivot_longer.html
filter(classifier == 1) %>%
#           When applied to a data frame, row names are silently dropped.
select(-classifier) %>%
mutate(age_cat = str_remove(age_cat, "age_"))
lotr
as_tibble(lotr)
install.packages("rio")
export(mtcars, "mtcars.csv") # R's built-in mtcars data-set.
pacman::p_load(
tidyverse,
data.table,
rio,
patchwork,
DT,
modelsummary,
collapse,
forcats
)
export(mtcars, "mtcars.csv") # R's built-in mtcars data-set.
export(mtcars, "mtcars.rds") # R serialized
export(mtcars, "mtcars.dta") # Stata
export(mtcars, "mtcars.json")
W <- import("mtcars.csv")
X <- import("mtcars.rds")
Y <- import("mtcars.dta")
Z <- import("mtcars.json")
df_list <- tibble::lst(mtcars, iris)
df_list
export_list(df_list, file = paste0(names(df_list), ".csv"))
Z <- import_list(dir(pattern = "csv$"))
x <- c(1, 2, 3, 4)
sqrt(mean(x))
x %>%
mean() %>%
sqrt()
"Ceci n&#37;est pas une pipe" %>% gsub("&#37;", "'", .)
# gsub() performs replacement of all matches in a chr. vector.
x |>
mean() |>
sqrt()
Sys.setenv("_R_USE_PIPEBIND_" = "true")
"Ceci n&#37;est pas une pipe" |> . => gsub("&#37;", "'", .)
parlgov_elec <- import("http://www.parlgov.org/static/data/development-cp1252/view_election.csv")
glimpse(parlgov_elec) # enhanced version of str()
glimpse(parlgov_elec)
glimpse (starwars)
glimpse(parlgov_elec)
parlgov_elec <- import("http://www.parlgov.org/static/data/development-cp1252/view_election.csv")
source("~/Library/Mobile Documents/com~apple~CloudDocs/Programming/R/LMU-Munich-Summer-School-2021/LMU-Munich-Summer-School-2021/Session Scripts/Session_3-4_script.R")
parlgov_elec <- import("https://parlgov.org/data/parlgov-development_csv-utf-8/"")
parlgov_elec <- import ("https://parlgov.org/data/parlgov-development_csv-utf-8/"")
parlgov_elec <- import ("https://parlgov.org/data/parlgov-development_csv")
parlgov_elec <- import ("https://parlgov.org/data/parlgov-development_csv-utf-8/")
library(readr)
view_election <- read_csv("~/Library/Mobile Documents/com~apple~CloudDocs/Programming/R/LMU-Munich-Summer-School-2021/parlgov-development_csv-utf-8/view_election.csv")
View(view_election)
